Function: foo
[BB1]
[Original]I1:  %2 = alloca i32, align 4
[Encoded] I1: ALLOCA i32 ALIGN 4 
[Original]I2:  store i32 %0, i32* %2, align 4
[Encoded] I2: STORE i32 %0 I32* (I1) ALIGN 4 
[Original]I3:  %3 = load i32, i32* %2, align 4
[Encoded] I3: LOAD i32 I32* (I1) ALIGN 4 
[Original]I4:  %4 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 noundef %3)
[Encoded] I4: CALL i32 (I8* ...) @PRINTF(I8* NOUNDEF GETELEMENTPTR INBOUNDS ([3 X I8] [3 X I8]* @.STR i64 0 i64 0) i32 NOUNDEF (I3) 
[Original]I5:  ret i32 1
[Encoded] I5: RET i32 1 
Function: bar
[BB1]
[Original]I1:  %2 = alloca i32, align 4
[Encoded] I1: ALLOCA i32 ALIGN 4 
[Original]I2:  store i32 %0, i32* %2, align 4
[Encoded] I2: STORE i32 %0 I32* (I1) ALIGN 4 
[Original]I3:  %3 = load i32, i32* %2, align 4
[Encoded] I3: LOAD i32 I32* (I1) ALIGN 4 
[Original]I4:  %4 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 noundef %3)
[Encoded] I4: CALL i32 (I8* ...) @PRINTF(I8* NOUNDEF GETELEMENTPTR INBOUNDS ([3 X I8] [3 X I8]* @.STR i64 0 i64 0) i32 NOUNDEF (I3) 
[Original]I5:  ret i32 2
[Encoded] I5: RET i32 2 
Function: main
[BB1]
[Original]I1:  %1 = alloca i32, align 4
[Encoded] I1: ALLOCA i32 ALIGN 4 
[Original]I2:  %2 = alloca [1000 x i32], align 16
[Encoded] I2: ALLOCA [1000 X I32] ALIGN 16 
[Original]I3:  %3 = alloca i32, align 4
[Encoded] I3: ALLOCA i32 ALIGN 4 
[Original]I4:  %4 = alloca i32, align 4
[Encoded] I4: ALLOCA i32 ALIGN 4 
[Original]I5:  store i32 0, i32* %1, align 4
[Encoded] I5: STORE i32 0 I32* (I1) ALIGN 4 
[Original]I6:  %5 = call i32 @foo(i32 noundef 24)
[Encoded] I6: CALL i32 @FOO(I32 NOUNDEF 24) 
[Original]I7:  store i32 0, i32* %3, align 4
[Encoded] I7: STORE i32 0 I32* (I3) ALIGN 4 
[Original]I8:  br label %6
[Encoded] I8: BR LABEL %6 
[BB2]
[Original]I1:  %7 = load i32, i32* %3, align 4
[Encoded] I1: LOAD i32 I32* (I3) ALIGN 4 
[Original]I2:  %8 = icmp slt i32 %7, 1000
[Encoded] I2: ICMP SLT i32 (I1) 1000 
[Original]I3:  br i1 %8, label %9, label %16
[Encoded] I3: BR I1 (I2) LABEL %9 LABEL %16 
[BB3]
[Original]I1:  %10 = load i32, i32* %3, align 4
[Encoded] I1: LOAD i32 I32* (I3) ALIGN 4 
[Original]I2:  %11 = sext i32 %10 to i64
[Encoded] I2: SEXT i32 (I1) TO I64 
[Original]I3:  %12 = getelementptr inbounds [1000 x i32], [1000 x i32]* %2, i64 0, i64 %11
[Encoded] I3: GETELEMENTPTR INBOUNDS [1000 X I32] [1000 X I32]* (I2) i64 0 i64 (I2) 
[Original]I4:  store i32 0, i32* %12, align 4
[Encoded] I4: STORE i32 0 I32* (I3) ALIGN 4 
[Original]I5:  br label %13
[Encoded] I5: BR LABEL %13 
[BB4]
[Original]I1:  %14 = load i32, i32* %3, align 4
[Encoded] I1: LOAD i32 I32* (I3) ALIGN 4 
[Original]I2:  %15 = add nsw i32 %14, 1
[Encoded] I2: ADD NSW i32 (I1) 1 
[Original]I3:  store i32 %15, i32* %3, align 4
[Encoded] I3: STORE i32 (I2) I32* (I3) ALIGN 4 
[Original]I4:  br label %6, !llvm.loop !6
[Encoded] I4: BR LABEL %6 !LLVM.LOOP !6 
[BB5]
[Original]I1:  store i32 100, i32* %4, align 4
[Encoded] I1: STORE i32 100 I32* (I4) ALIGN 4 
[Original]I2:  br label %17
[Encoded] I2: BR LABEL %17 
[BB6]
[Original]I1:  %18 = load i32, i32* %4, align 4
[Encoded] I1: LOAD i32 I32* (I4) ALIGN 4 
[Original]I2:  %19 = icmp slt i32 %18, 1000
[Encoded] I2: ICMP SLT i32 (I1) 1000 
[Original]I3:  br i1 %19, label %20, label %29
[Encoded] I3: BR I1 (I2) LABEL %20 LABEL %29 
[BB7]
[Original]I1:  %21 = load i32, i32* %4, align 4
[Encoded] I1: LOAD i32 I32* (I4) ALIGN 4 
[Original]I2:  %22 = sext i32 %21 to i64
[Encoded] I2: SEXT i32 (I1) TO I64 
[Original]I3:  %23 = getelementptr inbounds [1000 x i32], [1000 x i32]* %2, i64 0, i64 %22
[Encoded] I3: GETELEMENTPTR INBOUNDS [1000 X I32] [1000 X I32]* (I2) i64 0 i64 (I2) 
[Original]I4:  %24 = load i32, i32* %23, align 4
[Encoded] I4: LOAD i32 I32* (I3) ALIGN 4 
[Original]I5:  %25 = add nsw i32 %24, 10
[Encoded] I5: ADD NSW i32 (I4) 10 
[Original]I6:  store i32 %25, i32* %23, align 4
[Encoded] I6: STORE i32 (I5) I32* (I3) ALIGN 4 
[Original]I7:  br label %26
[Encoded] I7: BR LABEL %26 
[BB8]
[Original]I1:  %27 = load i32, i32* %4, align 4
[Encoded] I1: LOAD i32 I32* (I4) ALIGN 4 
[Original]I2:  %28 = add nsw i32 %27, 1
[Encoded] I2: ADD NSW i32 (I1) 1 
[Original]I3:  store i32 %28, i32* %4, align 4
[Encoded] I3: STORE i32 (I2) I32* (I4) ALIGN 4 
[Original]I4:  br label %17, !llvm.loop !8
[Encoded] I4: BR LABEL %17 !LLVM.LOOP !8 
[BB9]
[Original]I1:  %30 = call i32 @bar(i32 noundef 2023)
[Encoded] I1: CALL i32 @BAR(I32 NOUNDEF 2023) 
[Original]I2:  store i32 0, i32* %3, align 4
[Encoded] I2: STORE i32 0 I32* (I3) ALIGN 4 
[Original]I3:  br label %31
[Encoded] I3: BR LABEL %31 
[BB10]
[Original]I1:  %32 = load i32, i32* %3, align 4
[Encoded] I1: LOAD i32 I32* (I3) ALIGN 4 
[Original]I2:  %33 = icmp slt i32 %32, 1000
[Encoded] I2: ICMP SLT i32 (I1) 1000 
[Original]I3:  br i1 %33, label %34, label %44
[Encoded] I3: BR I1 (I2) LABEL %34 LABEL %44 
[BB11]
[Original]I1:  %35 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
[Encoded] I1: LOAD %STRUCT._IO_FILE* %STRUCT._IO_FILE** @STDOUT ALIGN 8 
[Original]I2:  %36 = load i32, i32* %3, align 4
[Encoded] I2: LOAD i32 I32* (I3) ALIGN 4 
[Original]I3:  %37 = sext i32 %36 to i64
[Encoded] I3: SEXT i32 (I2) TO I64 
[Original]I4:  %38 = getelementptr inbounds [1000 x i32], [1000 x i32]* %2, i64 0, i64 %37
[Encoded] I4: GETELEMENTPTR INBOUNDS [1000 X I32] [1000 X I32]* (I2) i64 0 i64 (I3) 
[Original]I5:  %39 = load i32, i32* %38, align 4
[Encoded] I5: LOAD i32 I32* (I4) ALIGN 4 
[Original]I6:  %40 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* noundef %35, i8* noundef getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i32 noundef %39)
[Encoded] I6: CALL i32 (%STRUCT._IO_FILE* I8* ...) @FPRINTF(%STRUCT._IO_FILE* NOUNDEF (I1) I8* NOUNDEF GETELEMENTPTR INBOUNDS ([4 X I8] [4 X I8]* @.STR.1 i64 0 i64 0) i32 NOUNDEF (I5) 
[Original]I7:  br label %41
[Encoded] I7: BR LABEL %41 
[BB12]
[Original]I1:  %42 = load i32, i32* %3, align 4
[Encoded] I1: LOAD i32 I32* (I3) ALIGN 4 
[Original]I2:  %43 = add nsw i32 %42, 1
[Encoded] I2: ADD NSW i32 (I1) 1 
[Original]I3:  store i32 %43, i32* %3, align 4
[Encoded] I3: STORE i32 (I2) I32* (I3) ALIGN 4 
[Original]I4:  br label %31, !llvm.loop !9
[Encoded] I4: BR LABEL %31 !LLVM.LOOP !9 
[BB13]
[Original]I1:  ret i32 1
[Encoded] I1: RET i32 1 
